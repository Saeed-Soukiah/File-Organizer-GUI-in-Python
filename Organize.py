"""
Author: Saeed Soukiah
Created on: 2025-05-10
Version: 1.0
"""
import os
import shutil
import tkinter as tk
from tkinter import filedialog, messagebox

def get_new_filename(dst_dir, filename, extension):
    """
    Generates a unique filename in destination directory by appending a counter for conflict resolution.
    
    Parameters:
        dst_dir (str): The destination directory.
        filename (str): The base name of the file (without extension).
        extension (str): The file extension (including the dot).
    
    Returns:
        str: The modified unique filename.
    """
    counter = 1
    new_filename = f"{filename}{extension}"
    candidate = os.path.join(dst_dir, new_filename)
    # Keep appending a counter until a unique filename is found
    while os.path.exists(candidate):
        new_filename = f"{filename} ({counter}){extension}"
        candidate = os.path.join(dst_dir, new_filename)
        counter += 1
    return new_filename

def organize_directory_recursively(root_path):
    """
    Recursively traverses the directory tree starting at root_path and organizes files
    by moving them into subdirectories based on their file extensions.
    
    For files with no extension, a folder named 'Other' is used.
    If a file naming conflict occurs in the target directory, a counter is appended.

    Parameters:
        root_path (str): The directory in which the organization begins.
    """
    # Normalize root_path for consistency across operating systems
    root_path = os.path.abspath(root_path)
    
    for item in os.listdir(root_path):
        item_path = os.path.join(root_path, item)
        
        # Process directories: If the directory isn't one of our organization folders, process it recursively.
        if os.path.isdir(item_path):
            # Skip folders that appear to be generated by our program (assumed to be all-uppercase)
            if item.isupper():
                continue
            organize_directory_recursively(item_path)
            # Try removing the directory if it becomes empty after processing
            try:
                os.rmdir(item_path)
            except OSError:
                pass
            continue
        
        # Process files:
        filename, file_extension = os.path.splitext(item)
        # Create folder name based on extension (without dot, in upper-case) or default to "Other"
        directory = file_extension[1:].upper() if file_extension else "Other"
        
        # Construct the target folder path in a cross-platform manner
        target_dir = os.path.join(root_path, directory)
        os.makedirs(target_dir, exist_ok=True)
        
        # Determine the destination file path
        dst_file = os.path.join(target_dir, item)
        # Resolve naming conflicts by generating a new filename if needed
        if os.path.exists(dst_file):
            new_name = get_new_filename(target_dir, filename, file_extension)
            dst_file = os.path.join(target_dir, new_name)
        
        # Move the file to its new destination folder
        shutil.move(item_path, dst_file)
        print(f"Moved: {item_path} --> {dst_file}")

def select_directory():
    """
    Opens a file dialog for the user to choose the directory to organize.
    Once a directory is selected, it updates the GUI label and attempts to organize the directory.
    """
    directory = filedialog.askdirectory()
    if directory:
        directory_label.config(text=f"Selected Directory:\n{directory}")
        try:
            organize_directory_recursively(directory)
            messagebox.showinfo("Success", "Files have been organized successfully!")
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {e}")

# --- GUI Setup ---

# Create the main window
root = tk.Tk()
root.title("File Organizer")
root.geometry("400x150")  # Set a reasonable window size

# Instructions label
instruction_label = tk.Label(root, text="Select a directory to organize files recursively:")
instruction_label.pack(pady=10)

# Button to select directory; calls select_directory() when clicked
select_btn = tk.Button(root, text="Select Directory", command=select_directory)
select_btn.pack(pady=5)

# Label to display the chosen directory
directory_label = tk.Label(root, text="No directory selected.")
directory_label.pack(pady=10)

# Start the GUI event loop
root.mainloop()
